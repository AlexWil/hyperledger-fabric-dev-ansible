---
- hosts: all
  vars_files:
    - variables.yml
  become: yes
  become_user: "{{ server_user }}"
  tasks:
    - name: Creates directory
      file: path=~/fabric-tools state=directory
    - name: Adding the path in the bashrc files
      lineinfile: dest=~/.bashrc line='export FABRIC_VERSION={{ hyperledger_fabric_version }}' insertafter='EOF' state=present
    - name: Configure globally which FABRIC_VERSION to use
      shell: >
        . ~/.bashrc && echo $FABRIC_VERSION
    - name: Download fabric-dev-servers.zip
      get_url:
        url: "{{ fabric_dev_servers_zip_url }}"
        dest: ~/fabric-tools/fabric-dev-servers.zip
        mode: 0755
    - name: Install docker, make and requirements for nodeJs
      become_user: root
      yum: pkg={{item}} state=installed
      with_items:
        - docker
        - make
        - glibc-devel
        - gcc
        - patch
        - gcc-c++
    - name: Append the docker group to {{ server_user }} so it can use docker
      become_user: root
      user:
        name: "{{ server_user }}"
        groups: docker
        append: yes
    - name: Start docker
      become_user: root
      service:
        name: docker
        state: started
    - name: Extract fabric-dev-servers.zip into ~/fabric-tools
      unarchive:
        src: ~/fabric-tools/fabric-dev-servers.zip
        dest: ~/fabric-tools
        remote_src: yes
    - name: Download fabric docker images by script
      shell: >
        cd ~/fabric-tools && ./downloadFabric.sh && touch ~/downloaded-images
        creates=~/downloaded-images
      args:
        executable: /bin/bash
    - name: Install docker-compose
      become_user: root
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: 0755
    - name: Make docker-compose executable
      become_user: root
      file: dest=/usr/local/bin/docker-compose mode=a+x
    - name: Add docker-compose to path
      become_user: root
      shell: >
        ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        creates=/usr/bin/docker-compose
    - name: Install nvm
      shell: >
        curl https://raw.githubusercontent.com/creationix/nvm/v{{ nvm_version }}/install.sh | sh
        creates=~/.nvm/nvm.sh
    - name: Install node and set version
      shell: >
        /bin/bash -c "source ~/.nvm/nvm.sh && nvm install v{{ node_version }} && nvm alias default v{{ node_version }}"
        creates=~/.nvm/alias
        warn=False
    - name: Install composer-cli globally
      shell: >
         . ~/.bashrc && npm install -g composer-cli@{{ composer_version }}
         creates=~/.nvm/versions/node/v{{ node_version }}/bin/composer
    - name: Start fabric containers
      shell: >
        cd ~/fabric-tools && ./startFabric.sh
      args:
        executable: /bin/bash
    - name: Create and import PeerAdmin card
      shell: >
        cd ~/fabric-tools && ./createPeerAdminCard.sh
        creates=~/.composer/cards/PeerAdmin@hlfv1/connection.json
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.PATH }}:/home/{{ server_user }}/.nvm/versions/node/v{{ node_version }}/bin"
    - name: Docker needs to start on reboot
      become_user: root
      lineinfile: dest=/etc/rc.local line='service docker start' insertafter='EOF' state=present
    - name: Fabric needs to start on reboot
      become_user: root
      lineinfile: dest=/etc/rc.local line='/home/{{ server_user }}/fabric-tools/startFabric.sh' insertafter='EOF' state=present
    - name: Make rc.local executable
      become_user: root
      file:
        path: /etc/rc.local
        mode: 0755
    - name: Synchronize PeerAdmin@hlfv1 card from .composer config
      synchronize:
        src: /home/{{ server_user }}/.composer/cards/PeerAdmin@hlfv1/
        dest: ~/.composer/cards/PeerAdmin@fabric-dev/
        recursive: yes
        mode: pull
    - name: Export PeerAdmin@hlfv1 card on machine
      shell: >
        composer card export --card PeerAdmin@hlfv1 --file ~/peer-admin.card
        creates=~/peer-admin.card
      environment:
        PATH: "{{ ansible_env.PATH }}:/home/{{ server_user }}/.nvm/versions/node/v{{ node_version }}/bin"
    - name: Synchronize exported PeerAdmin@hlfv1 card as file to local working directory
      synchronize:
        src: /home/{{ server_user }}/peer-admin.card
        dest: peer-admin.card
        mode: pull

    # Execute on local machine afterwards:
    # sed -i -e 's/localhost/the-remote-public-host/g' ~/.composer/cards/PeerAdmin@fabric-dev/connection.json
